name: Test csvcubed
on:
  push:
  pull_request:


jobs:
  test_in_environments:
    strategy:
      matrix:
        python-version: ['3.9'] #, '3.10']
        os: [windows-latest] #[ubuntu-latest, windows-latest]
        include: 
          - os: 'windows-latest'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Necessary for running csvlint inside the Windows VM.
      - uses: ruby/setup-ruby@v1
        if: matrix.os == 'windows-latest'
        with:
          ruby-version: '2.4'

      - name: Install csvlint, csv2rdf and sparql-test-runner (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          "$env:GITHUB_ACTION_PATH\windows-testing-setup.ps1"
        shell: pwsh

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install pyright
        run: npm install -g pyright

      - name: Install poetry
        run: pip install poetry

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ matrix.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Install python packages
        run: |
          poetry install
          poetry env info

      - name: Run pyright
        run: poetry run pyright . --lib

      - name: Run unittests
        run: poetry run pytest --junitxml=pytest_results.xml

      - name: Run behaviour tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:PATH = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path

          $csv2rdfLocation = (Get-Item csv2rdf.bat | Resolve-Path).Path.Substring(38)
          $sparqlTestsDir = (Get-Item gdp-sparql-tests/tests | Resolve-Path).Path.Substring(38)
          
          $env:NO_DOCKER="true"; $env:CSV2RDF="$csv2rdfLocation"; $env:SPARQL_TESTS_DIR="$sparqlTestsDir"; poetry run behave tests/behaviour --tags=-skip --junit --format progress
        shell: pwsh

      - name: Run behaviour tests (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: poetry run behave tests/behaviour --tags=-skip --junit --format progress

      - name: Upload unit & behave test results from xml files
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-python${{ matrix.python-version }} behave test results
          path: |
            pytest_results.xml
            reports/*.xml

      - name: Remove broken characters from xml test files
        # By removing broken characters from the xml unit/behave test files, we can then publish the tests results stored 
        # in those files in a user friendly way on github actions using 'EnricoMi/publish-unit-test-result-action@v1'.
        if: always()
        run: sed -i -e "s/[\\x0A\\x1B]//g" reports/TESTS-*.xml

      # Windows needs to run the `composite` action
      - name: Publish Unit & Behave Test Results (Windows)
        if: always() && matrix.os == 'windows-latest'
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          check_name: ${{ matrix.os }}-python${{ matrix.python-version }} test results
          junit_files: |
            reports/*.xml
            pytest_results.xml

      # Slightly more performant to run the non-composite action in ubuntu.
      - name: Publish Unit & Behave Test Results (Ubuntu)
        if: always() && matrix.os == 'latest'
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: ${{ matrix.os }}-python${{ matrix.python-version }} test results
          junit_files: |
            reports/*.xml
            pytest_results.xml
  
  build_package_and_documentation:
    if: needs.build_in_environments.result == 'success'
    needs: [build_in_environments]
    uses: ./.github/workflows/build-csvcubed.yaml
    secrets: inherit

  publish_package_and_documentation:
    if: needs.build_package_and_documentation.result == 'success' && (startsWith(github.ref, 'refs/tags/v') || github.ref_name == 'main')
    needs: [build_package_and_documentation]
    uses: ./.github/workflows/deploy-csvcubed.yaml
