name: Build csvcubed
on:
  push:
  pull_request:


jobs:
  build_in_environments:
    strategy:
      matrix:
        python-version: ['3.9'] #, '3.10']
        os: [windows-latest] #[ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setting up csvlint
      - uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: vendor/bundle
          key: ${{ matrix.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ matrix.os }}-gems-

      - uses: ruby/setup-ruby@v1
        if: matrix.os == 'windows-latest'
        with:
          ruby-version: '2.4'

      - name: Install csvlint (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          wget https://raw.githubusercontent.com/GSS-Cogs/csvlint-docker/master/Gemfile
          gem install bundle
          echo  "gem 'i18n', '~>1.12.0'" >> Gemfile
          bundle
          bundle install

      # Setting up csv2rdf
      - name: Install csv2rdf (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          wget https://github.com/Swirrl/csv2rdf/releases/download/0.4.7/csv2rdf-0.4.7-standalone.jar
          $csv2rdfPath = Get-Item csv2rdf-0.4.7-standalone.jar | Resolve-Path
          echo "@REM Forwarder script\n@echo off\njava -jar $$csv2rdfPath %*" > csv2rdf.bat
        shell: pwsh

      - name: Set Environment Variables (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $csvLintInstallationFolder = bundle info csvlint --path
          $env:PATH += ";$csvLintInstallationFolder/bin;$pwd"
          echo $env:PATH
          csv2rdf --help
        shell: pwsh


      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 16

      # - name: Install pyright
      #   run: npm install -g pyright

      # - name: Install poetry
      #   run: pip install poetry

      # - uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/pypoetry/virtualenvs
      #     key: ${{ matrix.os }}-poetry-${{ hashFiles('poetry.lock') }}

      # - name: Install python packages
      #   run: poetry install

      # - name: Run pyright
      #   run: poetry run pyright . --lib

      # - name: Run unittests
      #   run: poetry run pytest --junitxml=pytest_results.xml

      # - name: Upload unittests test results from xml file
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ matrix.os }}-python${{ matrix.python-version }} unit test results
      #     path: pytest_results.xml

      # - name: Publish Unit Test Results
      #   uses: EnricoMi/publish-unit-test-result-action/composite@v2
      #   with:
      #     check_name: ${{ matrix.os }}-python${{ matrix.python-version }} unit test results 
      #     junit_files: "pytest_results.xml"

      # - name: Run behaviour tests
      #   run: NO_DOCKER="${{ TODO: figure this expression out so linux runs inside the docker containers }}" poetry run behave tests/behaviour --tags=-skip --junit

      # - name: Remove broken characters from xml test files
      #   # By removing broken characters from the xml unit/behave test files, we can then publish the tests results stored 
      #   # in those files in a user friendly way on github actions using 'EnricoMi/publish-unit-test-result-action@v1'.
      #   run: sed -i -e 's/[\x0A\x1B]//g' reports/TESTS-*.xml
          
      # - name: Upload behave test results from xml files
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ matrix.os }}-python${{ matrix.python-version }} behave test results 
      #     path: reports/*.xml

      # - name: Publish Behave Test Results
      #   uses: EnricoMi/publish-unit-test-result-action/composite@v2
      #   with:
      #     check_name: ${{ matrix.os }}-python${{ matrix.python-version }} behave test results 
      #     junit_files: 'reports/*.xml'

      # todo: Ensure we only do Windows testing when in a release tag or is a commit on the main branch.
      # todo: Ensure we only do python3.9 testing in most cases, but also do python3.10 testing in all environments when in a release tag.

#  build_package_and_documentation:
#    if: needs.build_in_environments.result == 'success'
#    needs: [build_in_environments]
#    runs-on: ubuntu-latest
#    container:
#      image: gsscogs/pythonversiontesting
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Update version for release
#        if: startsWith(github.ref, 'refs/tags/v')
#        run: |
#          poetry version "$(echo "${{ github.ref_name }}" | sed -e 's/^.*\/v\(.*\)/\1/')"
#      - name: Update version for dev
#        # uses a version identifier derived from the Git hash for this commit.
#        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
#        run: |
#          revision="$(git rev-parse HEAD | tr \'[:lower:]\' \'[:upper:]\')"
#          decimal_rev=$(echo "obase=10; ibase=16; $revision" | bc)
#          poetry version "0.1.0-dev$decimal_rev"
#
#      - name: Build whl package
#        run: poetry build
#
#      - name: Build documentation
#        working-directory: external-docs
#        run: |
#          python3 -m pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
#          python3 -m mkdocs build
#
#      - name: Archive package and documentation
#        uses: actions/upload-artifact@v3
#        with:
#          name: package-and-documentation
#          path: |
#            **/dist/*.whl
#            **/external-docs/site/**/*
#
#  publish_package_and_documentation:
#    if: needs.build_package_and_documentation.result == 'success' # && startsWith(github.ref, 'refs/tags/v')
#    needs: [build_package_and_documentation]
#    runs-on: ubuntu-latest
#    steps:
#      # todo: iff in a release tag
#      # todo: Need to publish the documentation to the github repo
#      # todo: Need to publish the `.whl` package to pypi
#      - uses: actions/download-artifact@v3
#        with:
#          name: package-and-documentation
#
#      # - name: Publish a Python distribution to PyPI
#      #   uses: pypa/gh-action-pypi-publish@release/v1
#      #   with:
#      #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#      #     repository_url: https://test.pypi.org/legacy/
#
#      - name: Publish Docs
#        run: |
#          git config --global user.email "csvcubed@gsscogs.uk" && git config --global user.name "csvcubed"
#
#          git clone 'https://csvcubed:${{ secrets.CSVCUBED_GIT_COMMIT_TOKEN }}@github.com/GSS-Cogs/csvcubed-docs.git' --depth 1
#          cd csvcubed-docs
#
#          git checkout -b test-pages # gh-pages
#          git push --set-upstream origin test-pages
#
#          git rm -rf external --ignore-unmatch
#
#          mkdir external
#
#          cp -r ../external-docs/site/* external
#
#          touch .nojekyll
#
#          git add *
#          git add .nojekyll
#
#          git commit -m "Updating documentation."
#
#          git push
#
#
